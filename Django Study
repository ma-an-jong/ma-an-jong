django 시작하기 210708~

virtual environment >> 사용자가 서로 다른 두 환경에서 상호작용 할 수 있도록 도와줌.
                        각 가상환경은 종속성을 유지한다. 
                        가상환경을 이용함으로서 양쪽의 프로젝트의 종속성을 유지하는것이 매우 편리해진다.
                        proj1 = python 2.6, proj2 = python 3.8
                      
                     
django -admin startproject config . >> 현재 디렉토리에서 django를 시작 생성되는 파일은 다음과같다

장고는 MVC패턴에서 views = Templates , controls = views 이다. 따라서 
장고는 MTV패턴이라고 생각하자.


LocalDir
  config
      __init__
      asgi : channels를 이용할때 필요함
      settings : Django 프로젝트의 환경 및 구성을 저장. 웹사이트의 설정이 저장되어있음
      urls : 프로젝트의 url을 저장, url의 규칙을 보고 내부에 일치하는 view를 찾아 1:1 연결
      wsgi : 웹서버와 통신하기 위한 인터페이스
  AppName
      __init__
      admin : 앱의 관리자 사이트 설정
      apps : 앱의 기본 설정을 담음
      models : 모델에 대한 정보를 저장하고 테이블 필드를 제어
      views : 앱에 대한 view를 생성 (Control에 해당)
      tests : test case
      migration : 데이터베이스에서 정보를 얻어와 다른곳으로 전송시켜주는 프로세스
  
  manage: project와 상호작용하는 유틸리티도구
          스크립트와 사이트 관리를 도와줌
          웹서버를 실행해줌
          
         
Page Not Found 404 errors : urls.py에 URL매핑이 없기 때문이다.
HttpResponse : 페이지 요청에 대한 응답을 할 때 이용되는 장고 클래스

def index(request):
  return HttpResponse()
  
  URL을 분리하여 저장 : App관련 파일은 거의 AppName 디렉토리에 있어야하는데 urls.py는 그렇지 않다 따라서 URL이 수정될때 config 디렉터리에 있는 
  urls를 수정해야한다 이것은 프로젝트의 설계에 잘못된것이며 urls.py 를 따로 구성해야한다.
    path('AppName/',include('AppName.urls'))를 통해 AppName으로 시작되는 페이지 요청은 모두 AppName.urls의 URL 매핑을 참고하여 처리하라는 의미이다.
    AppName.urls.py 의 path('create',views.index)이면 최종 URL은 AppName/create/가 된다
unapplied migration(s). >> INSTALLED_APPS에서 데이터베이스를 이용하는 앱들이 필요로 하는 테이블이 생성되지 않았기때문이다.
  python manage.py migrate를 통해서 각 앱들이 사용하는 테이블을 만들어준다.

Django의 ORM(object relational mapping) : 데이터베이스와 객체간의 호환되지 않는 데이터를 매핑해주는 프로그래밍 기법
ORM 덕분에 파이썬은 Query문을 작성하지 않고 DML DDL등을 이용 할 수 있다.

ORM은 DB의 3가지 단점을 제거한다.
  1.개발자마다 작성되는 Query문은 통일성이 깨진다.
  2.개발자가 Query문을 잘못 작성하게 되면 시스템 성능이 저하된다.
  3.데이터베이스를 변경하게 되면 데이터베이스에 의존적인 Query문을 모두 재작성해야한다.
  
  ORM은 테이블을 모델화하여 사용하여 Query문을 자동으로 생성하기 때문에 Query문 작성에 의한 3가지 단점을 모두 제거한다.
  
  
models.py에 모델 작성하기
  class Model(models.Model):
    """
    필드 선언
    """
  Class 생성을 통해 모델을 정의한다. 객체의 필드는 테이블의 속성이 되도록 필드에 변수를 선언하고 각 변수에 맞는 값을 대입해주면 된다.
  models.Model은 이 Model클래스가 장고 모델임을 인식하여 데이터베이스에 저장되어야 할 클래스 임을 알게된다.

    INSTALLED_APP에 작성한 AppName을 등록해야한다.
    
    INSTALLED_APP = [
      """
      'AppName.apps.AppNameConfig'
      """
    ]
    
    apps.py 에 AppNameConfig클래스를 만든다.
    
    from django.apps import AppConfig
    class AppNameConfig(AppConfig):
      name = 'AppName'
    
    INSTALLED_APP에 추가했으면 migrate로 테이블을 생성해줘야한다.
    하지만 모델이 생성되거나 변경되면 테이블 작업 파일이 필요하기 때문에 makemigrations를 먼저 실행한다
    만약 함수가 추가되면 makemigration이나 migration을 할 필요가없다 왜나하면 모델의 속성이 추가되거나 변경된 경우가 아니기 때문이다.
    python manage.py makemigrations 를 통해 장고가 테이블 작업을 수행하기 위한 파일들을 생성해준다. 실제 테이블 생성 명령은 migration이다.
    
    Django shell : python shell 과는 다르게 장고에 필요한 환경들이 자동으로 설정되어 실행된다.
    
    shell을 이용하여 Model데이터 만들기 : Models(field)작성  >> .save() 를 통해 shell에서 작성한 객체를 데이터베이스에 저장해야함.
    모델 데이터에 id라는 기본키를 자동으로 부여한다. 데이터를 생성 할 때 마다 1씩 증가한다.
    데이터베이스에 저장된 내용을 지우고싶으면 .delete() 함수를 이용한다.
    
    A 모델과 B모델을 연결하려면 (B가 A의 기본키를 참조) ForeignKey로 A 모델과 B모델을 연결한다.\
    이렇게 연결된 모델로 데이터를 조회하려면 A.B_set과 같은 방법으로 데이터를 조회할수있다.
    
    A한개와 연결된 B 여러개를 조회하려면  A.B_set.all()을 통해 조회가 가능하다. 하지만 반대로
    B에 대응하는 A_set을 조회하는것은 불가능하다. 왜냐하면 1개의 B는 1개의 A에 연결되어 있기 때문에 A전체를 조회하는것은 불가능하다.
    
    
    Django admin  -Model관리 가능 
    
    admin을 사용하기 위해서는 슈퍼 유저(운영자 계정)를 생성해야한다.
    
    python manage.py createsuperuser를 통해서 슈퍼 유저를 생성한다.
    
    admin에 models를 import하여 데이터 저장 수정 삭제등 작업을 Admin을 통해 할 수 있다.
    """
    from .models import A
    
    admin.site.register(A)
    """
    Admin화면에서 A모델을 직관적으로 관리 할 수 있다.
    또한 search_field 등을 선언하여 데이터 관리에 기능을 추가 할 수 있다.
    
    from django.shortcut import render : 모델 데이터를 템플릿 파일을 사용하여 화면에 출력해줌.
    render(request,'template.html',출력할 내용)
    
    장고는 파이썬 코드에 있는 모델 데이터를 .html파일에 적용하여 HTML코드로 변환해준다. 이때 .html 파일을 템플릿이라 부른다.
    단순히 jsp와 비슷하게 장고의 태그를 추가한 html 이라 생각하자.
    템플릿을 추가할때는 settings에 DIRS에 템플릿 디렉터리를 등록하여 이용한다.
    
    장고의 템플릿 태그는 다음과 같다
    {% Tag %} {% endTag%}: for if 등 이용 
    {{ Variable | filter }} 또는 {{  Variable }} 변수의 속성에 접근도 가능하고 필터로 length등 접근 가능
    {% comment %} 주석 {% endcomment %}
    
    {% extends "template.html" %}
  
    {% block attribute %}
    {% endblock %}
    위 코드 처럼 템플릿 상속 또한 제공한다. 템플릿 상속을 통해서 웹 표준을 지키는 장고 템플릿 파일을 만들수있다.
    {% block attribute %} {% endblock %} 태그 사이에 템플릿 파일을 상속한 파일에서 구현하면 된다.
    
    django.urls.path() 함수는 path(route, view, kwargs=None, name=None) 와 같이 4개의 파라미터를 받아들일 수 있는데, 
    처음 2개의 파라미터는 반드시 있어야 하고, 뒤의 2개는 옵션이다. 
    첫번째 파라미터에는 URL route에서 사용된 경로를 지정하는 것이고,
    두번째 파라미터는 해당 URL에 상응하는 View를 지정하는 것이다. 
    두번째 파라미터에서 View를 지정하는 방식으로는 함수 뷰(function view)의 이름을 지정하거나
    클래스에 기반한 View (class based view)의 경우 "클래스명.as_view()"와 같이 지정한다.
    
    세번째 파라미터에는 Dictionary 형식의 아큐먼트를 옵션으로 지정할 수 있으며,
    마지막으로 네번째 파라미터에는 path 이름을 지정하는 것으로 이는 path명으로부터 URL 패턴 정보를 찾는 URL Reversing 을 위해 흔히 사용된다
    
    첫번째와 두번째는 중요하니 반드시 이해하자.
    
    path('',views.index) : 공백 즉 디폴트 웹페이지 URL인 경우 index() 함수를 호출하도록 표현한 것이다. 
    path("/egs.txt",views.ads) : "/egs.txt"를 요구했을 때, views.py 에 있는 egs() 함수를 호출할 것을 지정한 것이다.
    
    
    Page Not Found 404 출력 : shortcut로 부터 get_object_or_404를 import한다.
    get_object_or_404(Model,pk = id)  이 함수는 모델의 기본키를 이용하여 모델 객체 한 건을 반환한다. 기본키에 매핑되는 튜플이 없다면 404페이지를 반환한다.
    
    
    URL 별칭을 통한 하드코딩 문제 해결
    
    path의 네번째 파라미터를 통해 name 속성을 부여한다. 이후 템플릿에서 name을 통해서 URL의 실제 주소가 아닌 별칭을 매핑한다.
    
    그런데 name이 같은 앱이 존재할수있다. 이 경우에는 namespace를 도입하여 각 앱이 관리하는 독립된 이름 공간을 만들어 URL별칭을 유일하게 만들어준다
    {% url AppName:'name' A.id %}
    
    
    request 보내고 받은 값 출력하기 : 장고의 form을 이용
    
    
    <form action = "{% url 'AppName:name' A.id %}" method = "post">
    {% csrf_token %}
    <textarea name = "content" id = "content" rows = "15"> </textarea>
    <input type = "submit" value = "등록"> </input>
    </form>
    
    HTML에서의 form은 사용자가 데이터를 입력 할 수 있도록 해주고 서버로 데이터를 보내주는 역할을 한다. 
    form은 서버로 보낼 때 어디로 보낼지 목적지 그리고 HTTP 방법을 명시해줘야 된다.
    위의 코드에서는 데이터를 보낼 때 HTTP 방법은 POST 방식이되고 목적지는 AppName의 name에 매핑되는 url로 이동한다.
    textarea는 사용자가 보낼 데이터를 입력하는 부분이다.
    장고에서의 form은 더 나아가
    
   1. 렌더링을 위해서 데이터를 준비하고 재구성한다.
   2. HTML 폼을 만든다.
   3. 클라이언트로부터 제출이 된 데이터를 받고 처리해준다.
    
    장고는 form 기능을 수행하기 위해서 form클래스를 이용하는데
    모델 클래스의 필드는 모델 클래스의 필드가 데이터베이스 필드에 매칭 되는 것처럼
    폼도 폼 필드의 클래스는 html 요소 즉 태그에 매핑이 된다.
    
    다음은 입력받은 B에 대한 request를 Model에 추가하여 저장하는 메소드이다.
    
    def B_request_create(request,A_id):                             
                  a = get_object_or_404(A,pk = A.id)                          
                  a.B_set.create(content = request.POST.get('content'),      
                                  create_date = timezone.now() )
    
    
    파라미터로 request에는 textarea에 담긴 데이터가 파이썬 객체에 담겨 넘어온다
    A_id에는 URL 매핑 장보가 넘어온다 예를 들어 hello/world/123이 요청되면 A_id에는 2가 넘어온다.

    request로 부터 얻은 정보를 추출하기 위해 request.POST.get('content')를 content에 저장한다.
    이후 a.B_set.create 메소드를 써서  새로운 B 모델 데이터를 생성한다.
    
    classname_set 은 두 테이블간에 역참조 관계일때 해당하는 queryset을 반환해준다. 그리고 여기에 추가 삭제 할 시 db에 바로 저장이된다.
    
    상세 화면을 호출하려면 redirect를 이용한다. 
    redirect함수는 함수에 전달된 값을 참고하여 페이지 이동을 수행한다 첫번재 인수에는 이동할 페이지의 별칭을 두번째 인수에는 해당 URL에 전달해야하는 값을 입력한다.
    redirect('AppName:name',A_id = a.id)
    
    장고 폼
    HTML 폼은 웹 페이지 상에서 한개 이상의 필드나 위젯들의 묶음을 말하며, 사용자로부터 정보를 수집하여 서버에 제출하는데 사용된다. 폼은 사용자 입력을 수집하는데 유연하게 한다.
    
    장고폼은 2가지로 나눈다
    
    폼 : forms.Form을 상속받음 , 직접 필드를 정의해야함 , 위젯 설정이 필요함
    
    모델 폼 : forms.ModelForm을 상속받음 모델과 필드를 지정하면 모델폼이 자동으로 폼 필드를 
      모델과 연결된 폼이며 모델 폼 객체를 저장하면 연결된 모델의 데이터를 저장 할 수 있다.
      
    장고 모델 폼은 내부 클래스로 Meta클래스를 반드시 가져야하며 Meta 클래스에는 모델 폼이 사용할 모델과 모델의 필드들을 적어야한다.
    
    from django import forms
    from AppName.models import A
    
    class AForm(forms.ModelForm):
        class Meta:
            model = A
            fields = ['subject','content']
   
   
   AForm 클래스는 A 모델과 연결되어 있으며 필드는 subject , content를 사용한다고 정의했다.
   
   이 폼은 템플릿에서 {{ form.as_p }} 를 통해 전달된다 여기서 form이 바로 사용자가 입력한 데이터를 전달한 QuestionForm 객체이다.
   모델 폼과 연결된 subject,content에 값을 입력할 수 있는 HTML코드를 자동으로 만들어준다.
   
   def create(request):
   
      if request.method == 'POST':
          form = QuestionForm(request.POST)
          """
          
          """
      else:
          form = QuestionForm()
          """
          
          """
      context = {'form':form}
      return render(request,'templates.html',context)
          
    URL요청이 POST인지 GET인지 구분하여 처리한다.
    POST일경우 화면에 전달받은 데이터로 폼의 값이 채워지도록 객체를 만든다.
    
    페이징 기능 구현 : Paginator를 index 함수에 추가하여 구현
    
    page = request.GET.get('page','1') //page값을 가져옴 ?page가 없으면 1을 기본값으로 하여 가져온다.
    
    
    paginator = Paginator(question_list,10) //page당 한번에 10개씩 보여주기
    page_obj = paginator.get_page(page) // 현재 page객체 반환
    
    context = {'question_list':page_obj}
    return render(request,'pybo/question_list.html',context)
    
    Paginator클래스는 question_list를 페이징 객체 paginator로 변환한다.
    두 번째 파라미터는 페이지당 보여줄 게시물 개수를 의미한다.
    
   page_obj = paginator.get_page(page)로 만들어진 page_obj는 다음 속성을 이용한다
   
   paginator.count : 전체 게시물 개수
   paginator.per_page : 페이지당 보여줄 게시물 개수
   paginator.page_range : 페이지 범위
   number : 현재 페이지 번호
   previous_page_number : 이전 페이지 번호
   next_page_number : 다음 페이지 번호
   has_previous : 이전 페이지 유무
   has_next : 다음 페이지 유무
   start_index : 현재 페이지 시작 인덱스
   end_index : 현재 페이지의 끝 인덱스
    
    
    템플릿 필터 작성하기: 템플릿 필터 파일을 만든 후 load를 이용하여 적용
    
    from django import template
    
    register = template.Library()
    
    @register.filter
    def sub(value,arg):
      return value - arg
  
    @register.filter 라는 애너테이션을 적용하면 템플릿에서 해당 함수를 필터로 사용할 수 있게 된다.
    
    템플릿 필터 함수를 템플릿에 사용하기 위해서는 맨 위에 {% load pybo_filter %} 처럼 템플릿 필터 파일을 로드해야한다. load는 extends문 다음에 위치한다.
    
    로그인/로그아웃 구현 : django.contrib.auth 앱을 이용하여 구현
    
    로그인/로그아웃 >> 다른 사이트에서도 이용하는 공통 기능
    
    '공통 기능을 가진 앱'이라는 의미의 common앱에 로그인/로그아웃 구현 
    common앱을 생성하기 위해 django-admin startapp common 실행
    settings.py 에 common앱을 등록해야함 INSTALLED_APP에 'common.apps.CommonConfig' 추가
    이후 common앱의 urls.py를 이용하기위해 path('common/',include('common.urls')), 추가
    common/urls.py 생성 하고 app_name = 'common'으로 설정
    
    로그인 구현 : 기본 설정 account와 LoginView를 이용
    
    urls.py 에 URL매핑 추가. 
    views.py 에 로그인을 하는 메소드 추가 안해도 됨  django.contrib.auth에 있는 LoginView클래스를 이용하면 되기 때문.
    단, 현재 디렉토리의 view.py와 이름이 겹치지 않게 as logView등 다른 이름으로 바꿔준다.
    
    LoginView클래스는 registration이라는 템플릿 디렉터리에서 login.html파일을 찾는다. 따라서 registration/login.html 템플릿 파일을 작성해준다.
    
    하지만 login 기능은 일반적인 기능이기 때문에 common디렉터리에 템플릿을 생성하는것이 좋다.(앱 기능을 모아둔 common이 아닌 템플릿 기능을 모아둔 common)
    따라서 LoginView가 common디렉터리를 참조할수 있도록 urls.py를 수정한다.
    path('/login',auth_views.LoginView.as_view(template_name = 'common/login.html'),name = 'login')
    
    as_view 함수에서 template_name = 'common/login.html'로 설정하면 registration 디렉터리가 아니라 common 디렉터리에서 login.html파일을 참조하게 된다. 
    
    이후 로그인에 성공 시 이동할 페이지를 등록해야한다. 기본 설정은 accounts/profile 로 이동하지만 path에 매핑이 안되있다면 오류가 발생한다.
    settings.py에 마지막 줄에 LOGIN_REDIRECT_URL = '/'을 추가한다.
    그러면 config에 있는 urls.py에서 '/'에 맞는 URL을 찾아서 따라 갈것이다. 없다면 추가하자    
    
    로그아웃 구현 : 
    
    로그아웃 링크를 추가하여 urls.py 에 매핑
    그리고 로그인과 같이 로그아웃 성공시 이동할 페이지 settings.py에 등록
    LOGOUT_REDIRECT_URL = '/' 로 설정
    
    회원가입 구현 : contrib.auth 앱을 이용하여 구현  >> 회원가입 또한 공통적인 기능이기 때문 common에 작성한다.
    
    login.html에 회원가입 url을 추가했으므로 여기에 맞는 URL매핑을 추가해야한다.    
    path('signup/',views.signup,name = 'signup')
    
    이후 회원가입에 사용할 UserForm을 commons/forms.py 파일에 작성한다. 
    
    from django import forms
    from django.contrib.auth.forms import UserCreationForm
    from django.contrib.auth.models import User
    
    class UserForm(UserCreationForm):
      email = forms.EmailField(label = '이메일')
      
      class Meta:
          model = User
          field = ("username","email")
    
    
    UserForm은 django의 UserCreationForm을 상속하고 email을 추가하였다.
    UserCreationForm은 username, password1 , password2 속성을 가지고있다.
    거기에 추가로 email 속성을 추가하였다. 
    
    
    class Meta: '''''
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
